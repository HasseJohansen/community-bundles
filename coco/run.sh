#!/bin/bash

set -x

# This script will setup enclave-cc runtime to allow running confidential
# containers on the kairos cluster
# More here:
# https://github.com/confidential-containers/enclave-cc
# https://github.com/confidential-containers/documentation/blob/main/quickstart.md
#
# It works in 2 "modes":
# 1. when kairos first installs, it simply puts the plan.yaml in a place where
# k3s will see it an deploy it as soon as it's up and running.
# 2. when the plan actually runs, it will install this bundle but this time with
# COCO_DEPLOY set to "true". This will run the deployCoco function which puts the
# customized containerd binary in place and makes sure k3s uses that containerd
# (through a socket). Also it copies the containerd configuration generated by
# k3s, to the standard location from which our containerd will read it and to which
# the coco operator will append the `kata` plugin settings.
# (We copy /var/lib/rancher/k3s/agent/etc/containerd/config.toml to /etc/containerd/config.toml)

getConfig() {
    local l=$1
    key=$(kairos-agent config get "${l}" | tr -d '\n')
    if [ "$key" != "null" ]; then
     echo "${key}"
    fi 
    echo   
}

deployCoco() {
  mkdir -p /usr/local/bin
  cp -f assets/bin/* /usr/local/bin/

  # Setting an override for k3s service so that we can point to our config
  mkdir -p /etc/systemd/system/k3s.service.d
  # zz- to run apply override last

  # TODO: This flag: --kubelet-arg cgroup-driver=systemd
  # should probalby not be set when in alpine (or other non-systemd systems)
  # because maybe k3s decides to not put `SystemdCgroup = true` in the config.toml
  # in those cases.
  # https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver
  cp assets/k3s-override.conf /etc/systemd/system/k3s.service.d/zz-coco-override.conf

  # NOTE: Make sure the paths we write to are persisted by adding this to the
  # kairos config:
  # install:
  #   bind_mounts:
  #   - /etc/coco
  #   - /etc/containerd
  # Put our k3s config in place
  mkdir -p /etc/coco
  cp assets/k3s-config.yaml /etc/coco/

  cp assets/containerd.service /etc/systemd/system/
  mkdir -p /etc/systemd/system/containerd.service.d
  cp assets/containerd-override.conf /etc/systemd/system/containerd.service.d/

  mkdir -p /etc/containerd/
  cp -rf /var/lib/rancher/k3s/agent/etc/containerd/config.toml /etc/containerd/config.toml

  systemctl enable --now containerd.service

  touch /etc/containerd/.sentinel

  # Delete the plan (just in case, though is should not run again)
  rm -rf /var/lib/rancher/k3s/server/manifests/plan.yaml

  systemctl daemon-reload # read new definitions

  # NOTE: User should now reboot manually


  # TODO:
  # - In the config.toml generated by k3s, there is a line that point to the shims bin directory:
  #
  #   [plugins."io.containerd.grpc.v1.cri".cni]
  #    bin_dir = "/var/lib/rancher/k3s/data/599b4f3127975cf230091dd1fbb1c60fb7fa3ce1782b287fd8269855a279a757/bin"
  #    conf_dir = "/var/lib/rancher/k3s/agent/etc/cni/net.d"
  #
  #   This is where `containerd-shim-runc-v2` is but we should probably be using the
  #   binary we install in '/usr/local/bin`.
  #   How do we make use of our binary keeping the rest intact?
}


# This is the default functionality of this bundle. It applies a Plan on the cluster
# so that when it starts, it runs the function above to migrate the cluster
# to a "coco" one. The reason for doing this, is that we need to let k3s generate
# the containerd config.json so that we can append our runtimes to it.
# k3s won't generate a config for containerd if we specify "container-runtime-endpoint".
# https://github.com/k3s-io/k3s/blob/85b261096cc494b3795e659b8a5d86fff9251164/pkg/agent/run.go#L113
#
# BUNDLE_TARGET:
# https://github.com/kairos-io/kairos-sdk/commit/7a148fe5bb90c4ed5faceb534d72d6fc9852e8c0#diff-8e10d3eee9260dce2bf6cf7f8147d8052f350fb37c6c3e01c48d04852984b2efR183
installDeployPlan() {
  cp assets/plan.yaml /var/lib/rancher/k3s/server/manifests/
  sed -i "s|@IMAGE@|${BUNDLE_TARGET}|g" /var/lib/rancher/k3s/server/manifests/plan.yaml
}

if [ -n "$COCO_DEPLOY" ]; then
  deployCoco
else
  installDeployPlan
fi
